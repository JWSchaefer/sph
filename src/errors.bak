use std::fmt;

#[derive(Debug, Clone)]
pub enum Error {
    Kernel(KernelError),
    Array(ArrayError),
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Error::Kernel(err) => {
                write!(f, "Error: Kernel - {}", err)
            }
            Error::Array(err) => {
                write!(f, "Error: Array - {}", err)
            }
        }
    }
}

#[derive(Debug, Clone)]
pub enum ArrayError {
    Dimension(String),
    Function(String),
}

// impl fmt::Display for Error {
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
//         match self {
//             Error::Kernel(err) => err.fmt(f),
//             Error::Array(err) => err.fmt(f),
//         }
//     }
// }

impl fmt::Display for ArrayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            ArrayError::Dimension(msg) => write!(f, "Dimension - {}", msg),
            ArrayError::Function(msg) => write!(f, "Function - {}", msg),
        }
    }
}

#[derive(Debug, Clone)]
pub enum KernelError {
    Dimension(String),
    Normalisation(String),
}

impl fmt::Display for KernelError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            KernelError::Dimension(msg) => {
                write!(f, "Dimension - {}", msg)
            }
            KernelError::Normalisation(msg) => {
                write!(f, "Normalisation - {}", msg)
            }
        }
    }
}

impl std::error::Error for Error {}
impl std::error::Error for ArrayError {}
impl std::error::Error for KernelError {}
